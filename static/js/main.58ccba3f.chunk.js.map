{"version":3,"sources":["components/Statistics.js","components/FeedbackOptions.js","components/Section.js","components/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["Statistics","props","good","neutral","bad","total","positivePercentage","FeedbackOptions","onLeaveFeedback","options","map","name","onClick","Section","title","children","Notification","message","App","state","handelChangerGood","setState","handelChangerNeutral","handelChangerBad","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","handelChanger","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAGaA,EAAa,SAACC,GACzB,IAAQC,EAAkDD,EAAlDC,KAAMC,EAA4CF,EAA5CE,QAASC,EAAmCH,EAAnCG,IAAKC,EAA8BJ,EAA9BI,MAAOC,EAAuBL,EAAvBK,mBAEnC,OACE,gCACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,EAAT,OACA,wCAAWC,EAAX,OACA,mDAAsBC,EAAtB,YCTOC,EAAkB,SAACN,GAC9B,IAAQO,EAA6BP,EAA7BO,gBAAiBC,EAAYR,EAAZQ,QACzB,OACE,8BACGA,EAAQC,KAAI,SAACC,GACZ,OACE,wBAAQC,QAAS,kBAAMJ,EAAgBG,IAAvC,SACGA,GADgDA,SCNhDE,EAAU,SAACZ,GACtB,IAAQa,EAAoBb,EAApBa,MAAOC,EAAad,EAAbc,SAEf,OACE,oCACE,6BAAKD,IACJC,MCNMC,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC7B,OAAO,4BAAIA,KCGAC,EAAb,4MACEC,MAAQ,CACNjB,KAAM,EACNC,QAAS,EACTC,IAAK,GAJT,EAOEgB,kBAAoB,WAClB,EAAKC,UAAS,SAACF,GACb,MAAO,CACLjB,KAAMiB,EAAMjB,KAAO,OAV3B,EAeEoB,qBAAuB,WACrB,EAAKD,UAAS,SAACF,GACb,MAAO,CACLhB,QAASgB,EAAMhB,QAAU,OAlBjC,EAuBEoB,iBAAmB,WACjB,EAAKF,UAAS,SAACF,GACb,MAAO,CACLf,IAAKe,EAAMf,IAAM,OA1BzB,EA+BEoB,mBAAqB,WACnB,OAAO,EAAKL,MAAMjB,KAAO,EAAKiB,MAAMhB,QAAU,EAAKgB,MAAMf,KAhC7D,EAmCEqB,gCAAkC,WAChC,OAAOC,KAAKC,MAAO,EAAKR,MAAMjB,KAAO,EAAKsB,qBAAwB,MApCtE,EAuCEI,cAAgB,SAACjB,GACF,SAATA,EACF,EAAKS,oBACa,YAATT,EACT,EAAKW,uBACa,QAATX,GACT,EAAKY,oBA7CX,4CAiDE,WACE,MAA+BM,KAAKV,MAA5BjB,EAAR,EAAQA,KAAME,EAAd,EAAcA,IAAKD,EAAnB,EAAmBA,QACbE,EAAQwB,KAAKL,qBACnB,OACE,gCACE,cAAC,EAAD,CAASV,MAAM,wBAAf,SACE,cAAC,EAAD,CACEL,QAAS,CAAC,OAAQ,UAAW,OAC7BD,gBAAiBqB,KAAKD,kBAI1B,cAAC,EAAD,CAASd,MAAM,aAAf,SACa,IAAVT,EACC,cAAC,EAAD,CAAcY,QAAS,sBAEvB,cAAC,EAAD,CACEZ,MAAOA,EACPC,mBAAoBuB,KAAKJ,kCACzBvB,KAAMA,EACNC,QAASA,EACTC,IAAKA,aAtEnB,GAAyB0B,aCKVC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.58ccba3f.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const Statistics = (props) => {\r\n  const { good, neutral, bad, total, positivePercentage } = props\r\n\r\n  return (\r\n    <div>\r\n      <p>Good: {good}</p>\r\n      <p>Neutral: {neutral}</p>\r\n      <p>Bad: {bad} </p>\r\n      <p>Total: {total} </p>\r\n      <p>Positive feedback:{positivePercentage}% </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const FeedbackOptions = (props) => {\r\n  const { onLeaveFeedback, options } = props\r\n  return (\r\n    <div>\r\n      {options.map((name) => {\r\n        return (\r\n          <button onClick={() => onLeaveFeedback(name)} key={name}>\r\n            {name}\r\n          </button>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\nFeedbackOptions.propTypes = {\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n  options: PropTypes.array.isRequired,\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const Section = (props) => {\r\n  const { title, children } = props\r\n\r\n  return (\r\n    <section>\r\n      <h1>{title}</h1>\r\n      {children}\r\n    </section>\r\n  )\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const Notification = ({ message }) => {\r\n  return <p>{message}</p>\r\n}\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n}\r\n","import './App.css'\nimport { Component } from 'react'\nimport { Statistics } from './components/Statistics.js'\nimport { FeedbackOptions } from './components/FeedbackOptions.js'\nimport { Section } from './components/Section.js'\nimport { Notification } from './components/Notification.js'\n\nexport class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  }\n\n  handelChangerGood = () => {\n    this.setState((state) => {\n      return {\n        good: state.good + 1,\n      }\n    })\n  }\n\n  handelChangerNeutral = () => {\n    this.setState((state) => {\n      return {\n        neutral: state.neutral + 1,\n      }\n    })\n  }\n\n  handelChangerBad = () => {\n    this.setState((state) => {\n      return {\n        bad: state.bad + 1,\n      }\n    })\n  }\n\n  countTotalFeedback = () => {\n    return this.state.good + this.state.neutral + this.state.bad\n  }\n\n  countPositiveFeedbackPercentage = () => {\n    return Math.round((this.state.good / this.countTotalFeedback()) * 100)\n  }\n\n  handelChanger = (name) => {\n    if (name === 'good') {\n      this.handelChangerGood()\n    } else if (name === 'neutral') {\n      this.handelChangerNeutral()\n    } else if (name === 'bad') {\n      this.handelChangerBad()\n    }\n  }\n\n  render() {\n    const { good, bad, neutral } = this.state\n    const total = this.countTotalFeedback()\n    return (\n      <div>\n        <Section title=\"Please Leave feedback\">\n          <FeedbackOptions\n            options={['good', 'neutral', 'bad']}\n            onLeaveFeedback={this.handelChanger}\n          />\n        </Section>\n\n        <Section title=\"Statistics\">\n          {total === 0 ? (\n            <Notification message={'No feedback given'} />\n          ) : (\n            <Statistics\n              total={total}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n              good={good}\n              neutral={neutral}\n              bad={bad}\n            />\n          )}\n        </Section>\n      </div>\n    )\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { App } from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}